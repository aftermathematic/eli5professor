name: ELI5 Bot CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: eli5-discord-bot-bot-dev
  APP_RUNNER_SERVICE_ARN: arn:aws:apprunner:eu-west-3:335561736978:service/eli5-discord-bot-discord-bot-dev/a5592aca377042f5805c7595bd63a2a8

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Only check for critical errors, ignore style warnings for now
        echo "Linting completed - only critical errors checked"
    - name: Test with pytest
      run: |
        pytest --cov=src tests/

  build-and-deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build, tag, and push Discord bot image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "ECR Registry: $ECR_REGISTRY"
        echo "ECR Repository: $ECR_REPOSITORY"
        echo "Image Tag: $IMAGE_TAG"
        
        # Check if ECR repository exists, create if it doesn't
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
        # Build and push Discord bot image using Dockerfile.bot
        echo "Building Docker image..."
        docker build -f Dockerfile.bot -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f Dockerfile.bot -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "Pushing Docker images..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to App Runner
      run: |
        # App Runner automatically detects new images with 'latest' tag
        # Force a new deployment by updating the service
        aws apprunner start-deployment --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }}
        
        # Wait for deployment to complete
        echo "Waiting for App Runner deployment to complete..."
        aws apprunner wait service-operation-completed --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }}
        
        # Get final status
        STATUS=$(aws apprunner describe-service --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} --query 'Service.Status' --output text)
        echo "App Runner service status: $STATUS"
        
        if [ "$STATUS" = "RUNNING" ]; then
          echo "✅ Discord bot deployment successful!"
        else
          echo "❌ Discord bot deployment failed with status: $STATUS"
          exit 1
        fi
